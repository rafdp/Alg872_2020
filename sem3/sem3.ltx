\documentclass{article}

\usepackage{graphicx} 
\usepackage{amsmath} 
\usepackage[T2A]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage[russian,english]{babel}
\usepackage[left=2cm,right=2cm,top=2cm,bottom=2cm,footskip=1cm]{geometry}
\usepackage{xcolor}
\usepackage{hyperref}
\usepackage{eufrak}
\usepackage{amssymb}
\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    filecolor=magenta,      
    urlcolor=cyan
}
\newcommand{\fp}{\mathfrak{F}_p}
\setlength\parindent{0pt} 

\title{Семинар 3. \\ $\mathcal{P}$ vs $\mathcal{NP}$}

\author{Составил Р. Делла Пиетра} 
\date{29.2.20}


\begin{document}

\maketitle
\section{Определения}
\[ DTIME(t(n)) = \{L|\exists \textit{МТ, разрешающая $L$ за } O(t(n)) \textit{ тактов}\} \]
\[ \fp(n) = \{\textit{функции, вычислимые за } poly(n) \textit{, где $n$ длина аргумента}\}\]
\[ \mathcal{P} = \mathop{\bigcup}\limits_{c=1}^{\infty} DTIME(n^c) =  \{L\;|\;\exists \chi_L(x) \in \fp(|x|), \; \chi_L\textit{~---~характеристическая функция}\} \]
\[ \mathcal{NP} = \{L\;|\; \exists R(x, y) \in \fp(|x|) : \quad x \in L \iff \exists y: |y| = poly(|x|), R(x, y) = 1\} \]
\[ \textit{\\$R(x, y)$~---~предикат, проверяющий $x$, \quad $y$~---~сертификат или подсказка}\]
\[ co-\mathcal{NP} = \{L\;|\; \exists R(x, y) \in \fp(|x|) : \quad x \not\in L \iff \exists y: |y| = poly(|x|), R(x, y) = 0\} \]
Более интуитивные определения такие: $\mathcal{P}$~---~класс задач, которые легко решать, $\mathcal{NP}$~---~для которых легко проверять решение, а $co-\mathcal{NP}$~---~для которых легко опровергать решение . 
\section{Примеры}
\subsection{$\mathcal{P}$}
\subsubsection{$CONNECTED$}
Язык описаний связных графов. Покажем, что он лежит в $\mathcal{P}$.\\
Граф подаётся в виде матрицы смежности, то есть описание графа длины $n^2$, где $n$~---~количество вершин. Для проверки связности воспользуемся алгоритмом поиска в ширину, сложность которого $O(V + E)$. Вершин $n$, рёбер не более $n^2$, поэтому сложность $O(n^2)$. \\
Таким образом, разрешающий алгоритм выполняется за $O(n^2) \implies CONNECTED \in \mathcal{P}$
\subsubsection{$EULERCYCLE$}
Язык описаний графов с эйлеровым циклом (циклом по всем рёбрам). Известно, что для того, чтобы граф содержал эйлеров цикл, необходимо и достаточно, чтобы все вершины были чётной степени и граф был связным. Связность полиномиально проверять мы уже умеем, а для проверки чётности достаточно просуммировать строки матрицы, обнулив диагонали, и проверить на чётность.
\subsubsection{$EVEN$}
Множество чётных чисел. Число приходит записанное в двоичной системе, то есть нужно построить алгоритм, проверяющий чётность за $poly(\log n)$ тактов.
Если младший бит числа нулевой, число чётное. Построенный алгоритм работает за $O(1)$, поэтому $EVEN \in \mathcal{P}$.
\newpage
\subsection{$\mathcal{NP}$}
\subsubsection{$COMPOSITE$}
Множество составных чисел. Покажем, что оно лежит в $\mathcal{NP}$.\\
Пусть $y$~---~число-делитель $x$. Предикат будет проверять, что $1<y<x$, $y \; | \; x$. Считаем, что в нашей системе операции сравнения и деления происходят за один такт, поэтому наш алгоритм работает за $O(1)$. $y < x \implies |y| < |x|$.
\subsubsection{$3-COLOR$}
Язык описаний графов, вершины которого можно раскрасить в $3$ цвета так, чтобы соседние вершины были разных цветов. 
Пусть $y$~---~раскраска вершин в $3$ цвета. Предикат будет проверять, что в раскраске нет соседних вершин одного цвета. Для этого надо проверить не более $\frac{n(n-1)}{2}$ пар вершин, то есть алгоритм работает за $O(n^2)$. $|y| = n$.
\subsubsection{$SAT$}
Язык выполнимых булевых формул. Формулы состоят из некоторого набора переменных $z_1, z_2, \dotsc$, \\
операций $\land, \lor, \neg$ и скобок. \\
Пусть $y$~---~набор значений для переменных ($n$ единиц и нулей). Предикат будет подставлять значения в формулу и <<схлопывать>> её, используя таблицу операций: \[z_1\land(z_2\lor\neg z_3)\quad \rightarrow \quad 0\land(1\lor\neg 0) \quad \rightarrow \quad 0\land(1\lor1) \quad \rightarrow \quad 0\land1 \quad \rightarrow \quad 0\]
Таких схлопываний произойдёт не более, чем количество операций, а операций меньше, чем длина входа, поэтому предикат лежит в $\fp(|x|)$. Очевидно, ограничение на длину $y$ также выполнено.
\subsection{$co-\mathcal{NP}$}
\subsubsection{$TAUT$}
Язык тавтологичных булевых формул. 
Пусть $y$~---~набор значений для переменных ($n$ единиц и нулей), а предикат подставляет, <<схлопывает>> и проверяет результат. Если есть такой $y$, что формула обнуляется, это не тавтология.

\section{Сводимости}
Полиномиальное обобщение $m$-сводимости. 
\[A \leqslant_p B: \quad \exists f \in \fp(|x|): x \in A \iff f(x) \in B\]
Определим ещё несколько релевантных классов задач: \\
$A \in \mathcal{NP}-hard:\quad \forall B \in \mathcal{NP} \; B \leqslant A$.\\
$A \in \mathcal{NP}-complete \textit{ или } \mathcal{NP}c:\quad A \in \mathcal{NP} \bigcap\mathcal{NP}-hard$.\\
\subsection{Теорема Кука-Левина}
Язык выполнимых булевых формул в конъюнктной нормальной форме ($SAT$) $\mathcal{NP}$-полный.
\newpage
\subsection{Примеры задач}
\subsubsection{Доказать, что язык $CLIQUE \in \mathcal{NP}c$}
Это язык описаний графов и числа $k$, содержащих полный подграф размера $k$. Легко проверить, что язык лежит в $\mathcal{NP}$: $y$~---~номера вершин, образующих клику, и предикат проверяет $\frac{n(n-1)}{2}$ ячеек в матрице. Покажем, что $SAT$ сводится к $CLIQUE$.
Сводимость можно посмотреть \href{https://opendsa-server.cs.vt.edu/ODSA/Books/Everything/html/threeSAT_to_clique.html}{здесь}. \\
Если КНФ состоит из $k$ дизъюнктов, в построенном графе будет клика размера $k$ тогда и только тогда, когда в дизъюнкт выполним. \\
Таким образом, любая $\mathcal{NP}$ задача сводится к $SAT$, а $SAT$ сводится к $CLIQUE$, поэтому любая $\mathcal{NP}$ задача сводится к $CLIQUE$, то есть $CLIQUE \in \mathcal{NP}c$
\end{document}

